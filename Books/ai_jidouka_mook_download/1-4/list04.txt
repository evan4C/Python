RUBY_PATTERN = re.compile(' 《.*?》') # ルビの正規表現パターン
ADDITION_PATTERN = re.compile(' ［.*\］| （.*\）') # 文章中の補足情報のパターン（カッコは全角）
ALPHABET_PATTERN = re.compile('[a-zA-Z]') # アルファベットの正規表現パターン

def delete_newline_char(line):
  '''改行コードをすべて削除する'''
  return line.replace('\r', '').replace('\n', '')

def remove_ruby(line):
  '''ルビを削除する'''
  return RUBY_PATTERN.sub('', line)

def remove_additions(line):
  '''補足情報を消す'''
  return ADDITION_PATTERN.sub('', line)

def remove_escape_char(line):
  '''エスケープされた文字を消す'''
  return line.replace('\u3000', '')

def remove_symbols(line):
  '''記号を消す'''
  line = line.replace('-', '').replace(':', '').replace('/', '').replace('(', '').replace(')', '')
  return line

def remove_alphabets(line):
  '''アルファベットを消す'''
  return ALPHABET_PATTERN.sub('', line)

def separate_line_with_puncs(lines):
  '''句点で区切った文を吐き出す'''
  for line in lines:
    for sentence in line.split('。'):
      yield sentence

def preprocess(data):
  '''文章を前処理して文のリストにする'''
  lines = map(delete_newline_char, data)
  lines = map(remove_ruby, lines)
  lines = map(remove_additions, lines)
  lines = map(remove_escape_char, lines)
  lines = map(remove_symbols, lines)
  sentences = separate_line_with_puncs(lines)
  '''文が空のものを除去する'''
  sentences = filter(lambda x: len(x), sentences)
  return list(sentences)
